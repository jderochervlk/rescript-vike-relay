// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.mjs";
import * as CharacterQuery_graphql$MyRescriptViteApp from "./__generated__/CharacterQuery_graphql.mjs";

var convertVariables = CharacterQuery_graphql$MyRescriptViteApp.Internal.convertVariables;

var convertResponse = CharacterQuery_graphql$MyRescriptViteApp.Internal.convertResponse;

function useLoader(param) {
  return RescriptRelay_Query.useLoader(convertVariables, CharacterQuery_graphql$MyRescriptViteApp.node, (function (prim) {
                return prim;
              }), param);
}

function usePreloaded(param) {
  return RescriptRelay_Query.usePreloaded(CharacterQuery_graphql$MyRescriptViteApp.node, convertResponse, (function (prim) {
                return prim;
              }), param);
}

function Character$Card(props) {
  var data = usePreloaded(props.queryRef);
  var character = data.character;
  if (character === undefined) {
    return JsxRuntime.jsx("p", {
                children: "We couldn't find a character with an id of " + props.id
              });
  }
  var match = character.name;
  var match$1 = character.image;
  if (match !== undefined && match$1 !== undefined) {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("h2", {
                        children: match
                      }),
                  JsxRuntime.jsx("img", {
                        src: match$1
                      })
                ]
              });
  }
  return JsxRuntime.jsx("p", {
              children: "No name found"
            });
}

function Character$Wrapper(props) {
  var id = props.id;
  var match = useLoader(undefined);
  var cleanup = match[2];
  var load = match[1];
  var queryRef = match[0];
  React.useEffect((function (param) {
          Curry._4(load, {
                characterId: id
              }, undefined, undefined, undefined);
          return (function (param) {
                    Curry._1(cleanup, undefined);
                  });
        }), []);
  if (queryRef !== undefined) {
    return JsxRuntime.jsx(Character$Card, {
                id: id,
                queryRef: Caml_option.valFromOption(queryRef)
              });
  } else {
    return null;
  }
}

function Character(props) {
  return JsxRuntime.jsx(React.Suspense, {
              children: Caml_option.some(JsxRuntime.jsx(Character$Wrapper, {
                        id: props.id
                      }))
            });
}

var make = Character;

export {
  make ,
}
/* react Not a pure module */
